# Use the official Golang image to create a build artifact.
# This image is based on Debian and includes the Go development environment.
FROM golang:1.22 as builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go.mod and go.sum to download dependencies
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source code into the container
COPY main.go ./
COPY scraper.go ./
COPY BFS.go ./
COPY IDS.go ./

# Build the Go app as a static binary.
# CGO_ENABLED=0 is needed to build a statically-linked executable that does not depend on C libraries.
# -o main specifies the output file name.
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Start a new stage from scratch for a smaller image size
FROM alpine:latest  

# Install ca-certificates in case you need to make HTTPS requests
RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copy the pre-built binary file from the previous stage.
# The builder stage is where we built our application binary named "main".
COPY --from=builder /app/main .

# This container exposes port 8080 to the outside world
EXPOSE 3000

# Run the binary program produced by `go install`
CMD ["./main"]